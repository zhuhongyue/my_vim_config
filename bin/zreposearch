#!/bin/bash

################################################################################
# Copyright Statement: CVTE
# Copyright (C) 2014 Guangzhou Shiyuan Electronics Co.,Ltd. All rights reserved.
#      ____________        _______________  ___________
#     / / ________ \      / / _____   ____|| |  _______|
#    / / /      \ \ \    / / /   | | |     | | |
#   | | |        \ \ \  / / /    | | |     | | |_______
#   | | |         \ \ \/ / /     | | |     | |  _______|
#   | | |          \ \ \/ /      | | |     | | |
#    \ \ \______    \ \  /       | | |     | | |_______
#     \_\_______|    \_\/        |_|_|     |_|_________|
#
################################################################################
# descript:
#######################
# filename: zreposearch.mk
# author  : chenming
# date    : 2014-12-05
# version : V1.1.0
# note    :
# =====================
# auther  :
# date    :
# modify  :
# version :
# note    :
#
################################################################################
#zreposearch [-k string] [-s 2013-12-10] [-e 2013-12-20] [-c committer] [-a author] [-n showline]
MASKPROJECTS="external prebuilts abi bionic sdk"
################################################################################
CONST_VERSION="1.1.0"
CONST_ROOT_PATH=$(pwd)


CONST_START_TIME=""
CONST_END_TIME=""
CONST_COMMITTER=""
CONST_AUTHOR=""
CONST_BRANCHLISTS=""
CONST_KEYSTR=""
CONST_SHOWNUM=""


while getopts :s:e:c:a:b:k:n:vz OPT
do
   case $OPT in
        s)  CONST_START_TIME="$OPTARG";;
        e)  CONST_END_TIME="$OPTARG";;
        c)  CONST_COMMITTER="$OPTARG";;
        a)  CONST_AUTHOR="$OPTARG";;
        b)  CONST_BRANCHLISTS="$OPTARG";;
        k)  CONST_KEYSTR="$OPTARG";;
        n)  CONST_SHOWNUM="$OPTARG";;
        v)
            echo "version: ${CONST_VERSION}"
            exit 1;;
        ?)  Usage
            echo -e "\033[31;40;1m format error!!! \033[0m"
            echo -e "\033[31;40;1m eg: zreposearch [-k keycode] [-s 2013-12-10] [-e 2013-12-20] [-c committer] [-a author] [-n showline]  \033[0m"
            exit 1;;
    esac
done


if [ "$CONST_BRANCHLISTS"x == "."x ] || [ "$CONST_BRANCHLISTS"x == ""x ]; then
    CONST_BRANCHLISTS="search_cur"
elif [ "$CONST_BRANCHLISTS"x == "all"x ]; then
    CONST_BRANCHLISTS="search_all"
else
    echo -e "\033[31;40;1m format error!!! \033[0m"
    echo -e "\033[31;40;1m -b only support \., all, not set -b \033[0m"
    exit 1
fi

if [ "${CONST_KEYSTR}"x != ""x ];then
    g_keystr=${CONST_KEYSTR}
else
    g_keystr=""
fi

if [ "${CONST_COMMITTER}"x != ""x ];then
    g_committer="--committer=${CONST_COMMITTER}"
else
    g_committer=""
fi

if [ "${CONST_AUTHOR}"x != ""x ]; then
    g_author="--author=${CONST_AUTHOR}"
else
    g_author=""
fi

if [ "${CONST_START_TIME}"x != ""x ];then
    g_starttime="--after=${CONST_START_TIME}"
else
    g_starttime=""
fi

if [ "${CONST_END_TIME}"x != ""x ];then
    g_endtime="--before=${CONST_END_TIME}"
else
    g_endtime=""
fi

if [ "${CONST_SHOWNUM}"x != ""x ];then
    g_shownum="-${CONST_SHOWNUM}"
else
    g_shownum=""
fi

if [ "${g_keystr}"x == ""x ] && [ "${g_committer}"x == ""x ] && [ "${g_author}"x == ""x ] && [ "${g_starttime}"x == ""x ] && [ "${CONST_BRANCHLISTS}"x == ""x ]; then
    echo -e "\033[31;40;1m must set one of keycode , committer , author , starttime  \033[0m"
    echo -e "\033[31;40;1m format error!!! \033[0m"
    echo -e "\033[31;40;1m eg: zreposearch [-k keycode] [-s 2013-12-10] [-e 2013-12-20] [-c committer] [-a author] [-n showline]  \033[0m"
    exit 1
fi

# $1 --> dir
# $2 --> branch name
CONST_TMP_FILE=/tmp/reposearch.tmp
function fun_show_log()
{
    local l_prjdir=$1
    local l_branch=$2

    cd $l_prjdir

    if [ "${g_keystr}"x == ""x ]; then
        git log --format="%Cgreen%H %Cred[%ci] %Creset<%cn> %Creset  %Cgreen%s  %Creset" \
        ${g_committer} ${g_author} ${g_starttime} ${g_endtime} ${g_shownum} ${l_branch} > $CONST_TMP_FILE
    else
        git log --format="%Cgreen%H %Cred[%ci] %Creset<%cn> %Creset  %Cgreen%s  %Creset"  \
        ${g_committer} ${g_author} ${g_starttime} ${g_endtime} ${g_shownum} ${l_branch} | grep -i "${g_keystr}" > $CONST_TMP_FILE
    fi

    if [ -s $CONST_TMP_FILE ]; then
        echo "$l_prjdir"
        echo "--------:${l_branch}:--------"
        cat $CONST_TMP_FILE
    fi
}

# $1 -->path
function fun_search_one_project()
{
    local l_prjdir=$1
    local l_branch=""
    local l_branchall=""
    local l_tmpbranch=""

    if [ "$CONST_BRANCHLISTS" == "search_cur" ]; then
        fun_show_log $l_prjdir
        return
    elif [ "$CONST_BRANCHLISTS" == "search_all" ]; then
        l_branchall=$(git branch | cut -c3-)
    else
        return
    #   l_tmpbranch=$(git branch | cut -c3-)

    #   # for l_branch in $l_branchall
    #   # do
    #   #   echo $l_branch
    #   # done

    #   for l_branch in $CONST_BRANCHLISTS
    #   do
    #       tmpstr=$(echo $l_tmpbranch | grep "$l_branch")
    #       if [ "$tmpstr"x != ""x ]; then
    #           l_branchall+=" $l_branch"
    #       fi

    #   done
    fi

    for l_branch in $l_branchall
    do
        fun_show_log $l_prjdir $l_branch
    done
}

# fun_search_one_project
# exit 0

function exe_reposearch()
{
    local l_allprojects=$(repo info | grep "^Mount path:" | cut -d":" -f2)
    local l_theprj=""
    local l_maskprj=""
    local l_findflag=0
    for l_theprj in $l_allprojects
    do

        l_findflag=1
        for l_maskprj in $MASKPROJECTS
        do
            #echo $l_maskprj
            tmpstr=$(echo $l_theprj | grep "$l_maskprj")
            if [ "$tmpstr"x != ""x ];then
                l_findflag=0
                break
            fi
        done

        if [ $l_findflag -ge 1 ];then
            fun_search_one_project $l_theprj
        fi

    done

}

exe_reposearch

cd $CONST_ROOT_PATH

